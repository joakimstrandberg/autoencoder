{"version":3,"sources":["constants.js","components/ImageComponent.js","components/Slider.js","model.js","components/MnistContainer.js","components/ImageComponentCol.js","components/FacesContainer.js","components/Navbar.js","components/App.js","serviceWorker.js","index.js"],"names":["modelApiPath","mnistModelsPath","facesModelsPath","ImageComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","reshape","data","pixelData","x","state","width","y","height","Math","floor","showImage","undefined","c","document","getElementById","id","scale","ctx","getContext","fillStyle","fillRect","nextProps","react_default","a","createElement","style","canvasDiv","name","border","Component","borderRadius","padding","Slider","className","display","float","pc","parseFloat","value","toFixed","type","step","min","max","onChange","event","onSlide","Model","autoencoder","encoder","decoder","inputShape","arr","getLayer","batchInputShape","slice","path","callback","Promise","all","tf","strict","then","res","getInputShape","catch","err","console","log","_this2","unshift","x_tensor","predict","arraySync","_this3","_this4","length","MnistContainer","fetchPcInfo","fetch","json","result","setState","pcOrder","order","minValues","maxValues","fetchDigit","digit","predictDigit","predDigit","model","getEncoderOutput","encoderOutout","predictEncoder","decoderInput","updateDecoderInput","index","newInput","update","defineProperty","$set","target","decoderOutput","predictDecoder","createSliders","numRows","ceil","sliders","i","rowOfSliders","j","push","Col","key","components_Slider","Row","toString","modelIsLoaded","loadModel","deleteModel","appDiv","Container","components_ImageComponent","margin","Button","onClick","color","disabled","ImageComponentCol","FacesContainer","fetchData","sample","encoderOutput","components_ImageComponentCol","channels","Navbar","Nav","NavItem","NavLink","tag","Link","textDecoration","to","App","connecToServer","bind","assertThisInitialized","components_Navbar","react_router","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c960e94.chunk.js","sourcesContent":["\r\nexport const modelApiPath = \"https://model-api.herokuapp.com/\";\r\nexport const mnistModelsPath = modelApiPath + \"models/mnist/\";\r\nexport const facesModelsPath = modelApiPath + \"models/faces/light_model/\";\r\n","import React, { Component } from 'react';\r\n\r\n//TODO: should have fixed size\r\nclass ImageComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            scale: 10,\r\n            height: 28,\r\n            width: 28\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if (this.props.data !== nextProps.data){\r\n            this.showImage(this.props.data);\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (this.props.data !== null){\r\n            this.showImage(this.props.data);\r\n        }\r\n    }\r\n\r\n    reshape = (data) =>{\r\n        var pixelData = [];\r\n        for (var x=0; x<this.state.width; x++) {\r\n            pixelData[x] = [];\r\n            for (var y=0; y<this.state.height; y++) {\r\n                pixelData[x][y] = \"rgb(\"+Math.floor(data[this.state.height*y+x]*255.0)+\",\"+\r\n                Math.floor(data[this.state.height*y+x]*255.0)+\",\"+\r\n                Math.floor(data[this.state.height*y+x]*255.0)+\")\";\r\n            }\r\n        }\r\n        return pixelData\r\n    }\r\n\r\n    showImage = (data) => {\r\n        if(data === undefined){return}\r\n        var pixelData = this.reshape(data);\r\n        var c = document.getElementById(this.props.id);\r\n        c.width = this.state.width*this.state.scale;\r\n        c.height = this.state.height*this.state.scale;\r\n        var ctx = c.getContext(\"2d\");\r\n\r\n        for (var x=0; x<this.state.width; x++) {\r\n            for (var y=0; y<this.state.height; y++) {\r\n                ctx.fillStyle = pixelData[x][y];\r\n                ctx.fillRect(x*this.state.scale, y*this.state.scale, this.state.scale, this.state.scale);\r\n            }\r\n        }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div style= {canvasDiv}>\r\n        <h4>{this.props.name}</h4>\r\n          <canvas id={this.props.id} style={{border:'1px solid #d3d3d3'}} height={this.state.height*this.state.scale} width={this.state.width*this.state.scale}></canvas>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n      \r\n  const canvasDiv = {\r\n    border: '1px solid #d3d3d3',\r\n    borderRadius: '5px',\r\n    padding: '0.5em'\r\n  }\r\n  \r\n  export default ImageComponent;","import '../style/Slider.css';\r\nimport React from 'react';\r\n\r\nconst Slider = props => (\r\n    <div className=\"slider-div\">\r\n        <div>\r\n            <b style={{display: \"inline\", float: \"left\"}}>PC {props.pc}</b>\r\n            <p style={{display: \"inline\", float: \"right\"}} className='slider-value'>{parseFloat(props.value).toFixed(2)}</p>\r\n        </div>\r\n        <input type=\"range\" step={props.step} min={props.min} max={props.max} value={props.value} onChange={event => props.onSlide(props.id,event)} className=\"slider\" id={props.id}/>\r\n    </div>\r\n);\r\n\r\nexport default Slider;","import * as tf from '@tensorflow/tfjs'\r\n//import * as tf from '@tensorflow/tfjs-node-gpu'\r\n\r\nexport default class Model {\r\n    constructor(){\r\n        this.autoencoder = null;\r\n        this.encoder = null;\r\n        this.decoder = null;\r\n        this.inputShape = null\r\n    }\r\n\r\n    getInputShape(){\r\n        const arr = this.autoencoder.getLayer(\"input_1\").batchInputShape.slice(1);\r\n        this.inputShape = arr;\r\n    }\r\n\r\n    loadModel(path,callback){\r\n        Promise.all([\r\n            tf.loadLayersModel(path + 'autoencoder/model.json',{strict:true}).then(res => {\r\n                this.autoencoder = res;\r\n                this.getInputShape();\r\n            }),\r\n            tf.loadLayersModel(path + 'decoder/model.json',{strict:true}).then(res => {\r\n                this.decoder = res;\r\n            }),\r\n            tf.loadLayersModel(path + 'encoder/model.json',{strict:true}).then(res => {\r\n                this.encoder = res;\r\n            })\r\n        ]).then(() => {\r\n            callback();\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    deleteModel(){\r\n        tf.disposeVariables();\r\n    }\r\n\r\n    predict(x){\r\n        const d = tf.tidy(() => { \r\n            var shape = this.inputShape.slice();\r\n            shape.unshift(1);\r\n            const x_tensor= tf.tensor([x]);\r\n            var pred = this.autoencoder.predict(x_tensor);\r\n            var arr = pred.arraySync()[0];\r\n            return arr;\r\n        })\r\n        return d;\r\n    }\r\n\r\n    predictEncoder(x){\r\n        const d = tf.tidy(() => {  \r\n            const x_tensor= tf.tensor([x]);\r\n            var pred = this.encoder.predict(x_tensor);\r\n            var arr = pred.arraySync()[0];\r\n            return arr;\r\n        })\r\n        return d;\r\n    }\r\n\r\n    predictDecoder(x){\r\n        const d = tf.tidy(() => {  \r\n            const x_tensor= tf.tensor(x,[1,x.length]);\r\n            var pred = this.decoder.predict(x_tensor);\r\n            var arr = pred.arraySync()[0];\r\n            return arr;\r\n        })\r\n        return d;\r\n    }\r\n\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport '../style/App.css';\r\nimport update from 'immutability-helper';\r\nimport {mnistModelsPath,modelApiPath} from \"../constants.js\";\r\n\r\nimport { Button, Container, Row, Col} from 'reactstrap';\r\nimport ImageComponent from './ImageComponent';\r\nimport Slider from './Slider';\r\nimport Model from '../model.js';\r\n\r\n/*TODO: fix fetchdigit when component mounts. \r\nTODO: merge mnist and faces container into one\r\n*/\r\nclass MnistContainer extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        digit: null,\r\n        predDigit: null,\r\n        model: null,\r\n        modelIsLoaded: false,\r\n        decoderInput: null,\r\n        encoderOutout: null,\r\n        pcOrder: null,\r\n        minValues: null,\r\n        maxValues: null,\r\n        step: null\r\n      };\r\n    }\r\n  \r\n    componentDidMount(){\r\n      //Instantiate model\r\n      const model = new Model();\r\n      model.loadModel(mnistModelsPath,()=>\r\n        this.setState({model:model},() => {\r\n          this.setState({modelIsLoaded:true}, () => {\r\n            this.fetchPcInfo();\r\n          });\r\n        })\r\n      );\r\n    }\r\n\r\n    componentWillUnmount(){\r\n      //Make sure memory is not leaking\r\n      if (!!this.state.model) {\r\n        this.state.model.deleteModel();\r\n      }\r\n    }\r\n\r\n    fetchPcInfo = () => {\r\n      fetch(modelApiPath + \"api/mnist/fetch-pc-info\")\r\n        .then(res => res.json())\r\n        .then( result => {\r\n          this.setState({pcOrder: result.order,minValues: result.min,maxValues: result.max,step: result.step});\r\n        })\r\n        .catch(err=> {\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    fetchDigit = () => {\r\n      fetch(modelApiPath + \"api/mnist/fetch-digit\")\r\n        .then(res => res.json())\r\n        .then( result => {\r\n          this.setState({digit: result[0]}, () => {\r\n            this.predictDigit();\r\n          });\r\n        })\r\n        .catch(err=> {\r\n            console.log(err);\r\n        });\r\n    }\r\n  \r\n    predictDigit = () => {\r\n      const predDigit = this.state.model.predict(this.state.digit);\r\n      this.setState({predDigit:predDigit});\r\n      this.getEncoderOutput();\r\n    }\r\n  \r\n    getEncoderOutput = () => {\r\n      const encoderOutout = this.state.model.predictEncoder(this.state.digit);\r\n      this.setState({encoderOutout:encoderOutout},this.setState({decoderInput:encoderOutout}));\r\n    }\r\n  \r\n    updateDecoderInput = (index,data) => {\r\n      const newInput = update(this.state.decoderInput, {[index]: {$set: parseFloat(data.target.value)}});\r\n      this.setState({decoderInput:newInput},() => {\r\n        const decoderOutput = this.state.model.predictDecoder(this.state.decoderInput);\r\n        this.setState({predDigit:decoderOutput});\r\n      });\r\n    }\r\n  \r\n    createSliders = () => {\r\n      const numCols = 8;\r\n      const numRows = Math.ceil(this.state.decoderInput.length/numCols);\r\n      var sliders = [];\r\n      for (let i=0;i<numRows;i++){\r\n        const rowOfSliders = [];\r\n        for (let j = i*numCols; j < (i+1)*numCols; j++) {\r\n          if (j>this.state.decoderInput.length){\r\n            rowOfSliders.push(<Col key={-j} className='slider-col'></Col>)\r\n          } else {\r\n            rowOfSliders.push(<Col key={j} className='slider-col'><Slider id={this.state.pcOrder[j]} pc={j+1} value={this.state.decoderInput[this.state.pcOrder[j]]} onSlide={this.updateDecoderInput} min={this.state.minValues[j]} max={this.state.maxValues[j]} step={this.state.step[j]}/></Col>)\r\n          }\r\n        }\r\n        sliders.push(<Row key={i.toString()+\"_row\"} >{rowOfSliders}</Row>);\r\n      }\r\n      return sliders;\r\n    }\r\n  \r\n    render() {\r\n      let sliders;\r\n      if (!!this.state.decoderInput){\r\n        sliders = this.createSliders();\r\n      } else {\r\n        sliders = null;\r\n      }\r\n  \r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Autoencoder</h1>\r\n          <div className=\"container\" style={appDiv}>\r\n          <Container>\r\n            <Row>\r\n              <Col><ImageComponent id={\"inputCanvas\"} name={\"Input image\"} data={this.state.digit}/></Col>\r\n              <Col><ImageComponent id={\"predCanvas\"} name={\"Output image\"} data={this.state.predDigit}/></Col>\r\n            </Row>\r\n            <Row>\r\n              <Col style={{margin: '1em auto'}}><Button onClick={() => this.fetchDigit()} color=\"danger\" disabled={!!this.state.modelIsLoaded? false : true}>New Input</Button></Col>\r\n              <Col style={{margin: '1em auto'}}><Button onClick={() => this.predictDigit()} color=\"primary\"  disabled={!!this.state.digit? false : true} >Reset</Button></Col>\r\n            </Row>\r\n            {sliders}\r\n          </Container>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const appDiv = {\r\n    border: '1px solid #d3d3d3',\r\n    padding: '1em',\r\n  }\r\n  \r\n  export default MnistContainer;\r\n  ","import React, { Component } from 'react';\r\n\r\n//TODO: should have fixed size\r\n\r\nclass ImageComponentCol extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            scale: 10,\r\n            height: 64,\r\n            width: 64\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(nextProps) {\r\n        if (this.props.data !== nextProps.data){\r\n            this.showImage(this.props.data);\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        if (this.props.data !== null){\r\n            this.showImage(this.props.data);\r\n        }\r\n    }\r\n\r\n\r\n    reshape = (data) =>{\r\n        var pixelData = [];\r\n        for (var x=0; x < data.length; x++) {\r\n            pixelData[x] = []\r\n            console.log(data[0])\r\n            for (var y=0; y<this.props.height; y++) {\r\n                pixelData[x][y] = \"rgb(\"+Math.floor(data[0][x][y][0]*255.0)+\",\"+\r\n                Math.floor(data[0][x][y][1]*255.0)+\",\"+\r\n                Math.floor(data[0][x][y][2]*255.0)+\")\";\r\n            }\r\n        }\r\n        return pixelData\r\n    }\r\n\r\n    showImage = (data) => {\r\n        if(data === undefined){return}\r\n        var c = document.getElementById(this.props.id);\r\n        c.width = this.props.width*this.props.scale;\r\n        c.height = this.props.height*this.props.scale;\r\n        var ctx = c.getContext(\"2d\");\r\n        for (var x=0; x<this.state.width; x++) {\r\n            for (var y=0; y<this.props.height; y++) {\r\n                ctx.fillStyle =\"rgb(\"+Math.floor(data[y][x][0]*255.0)+\",\"+\r\n                Math.floor(data[y][x][1]*255.0)+\",\"+\r\n                Math.floor(data[y][x][2]*255.0)+\")\";;\r\n                ctx.fillRect(x*this.props.scale, y*this.props.scale, this.props.scale, this.props.scale);\r\n            }\r\n        }\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div style= {canvasDiv}>\r\n        <h4>{this.props.name}</h4>\r\n          <canvas id={this.props.id} style={{border:'1px solid #d3d3d3'}} height={this.props.height*this.props.scale} width={this.props.width*this.props.scale}></canvas>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n      \r\n  const canvasDiv = {\r\n    border: '1px solid #d3d3d3',\r\n    borderRadius: '5px',\r\n    padding: '0.5em'\r\n  }\r\n  \r\n  export default ImageComponentCol;","import React, { Component } from 'react';\r\nimport '../style/App.css';\r\nimport update from 'immutability-helper';\r\nimport {facesModelsPath, modelApiPath} from \"../constants.js\";\r\n\r\nimport { Button, Container, Row, Col} from 'reactstrap';\r\nimport ImageComponentCol from './ImageComponentCol';\r\nimport Slider from './Slider';\r\nimport Model from '../model.js';\r\n\r\nclass FacesContainer extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        sample: null,\r\n        decoderOutput: null,\r\n        model: null,\r\n        modelIsLoaded: false,\r\n        decoderInput: null,\r\n        encoderOutput: null,\r\n        pcOrder: null,\r\n        minValues: null,\r\n        maxValues: null,\r\n        step: null\r\n      };\r\n    }\r\n  \r\n    componentDidMount(){\r\n      //Instantiate model\r\n      console.log(facesModelsPath); \r\n      const model = new Model();\r\n      model.loadModel(facesModelsPath,()=>\r\n        this.setState({model:model},() => {\r\n          this.setState({modelIsLoaded:true}, () => {\r\n            this.fetchPcInfo();\r\n          });\r\n        })\r\n      );\r\n    }\r\n    \r\n    componentWillUnmount(){\r\n      if (!!this.state.model) {\r\n        this.state.model.deleteModel();\r\n      }\r\n    }\r\n\r\n    fetchPcInfo = () => {\r\n      fetch(modelApiPath + \"api/faces/fetch-pc-info\")\r\n        .then(res => res.json())\r\n        .then( result => {\r\n          this.setState({pcOrder: result.order,minValues: result.min,maxValues: result.max,step: result.step});\r\n        })\r\n        .catch(err=> {\r\n            console.log(err);\r\n        });\r\n    }\r\n    \r\n    fetchData = () => {\r\n      fetch(modelApiPath + \"api/faces/fetch-face\")\r\n        .then(res => res.json())\r\n        .then( result => {\r\n          this.setState({sample: result[0]}, () => {\r\n            this.predict();\r\n          });\r\n        })\r\n        .catch(err=> {\r\n            console.log(err);\r\n        });\r\n    }\r\n  \r\n    predict = () => {\r\n      const decoderOutput = this.state.model.predict(this.state.sample);\r\n      this.setState({decoderOutput:decoderOutput},() =>{\r\n      });\r\n      this.getEncoderOutput();\r\n    }\r\n  \r\n    getEncoderOutput = () => {\r\n      const encoderOutput = this.state.model.predictEncoder(this.state.sample);\r\n      this.setState({encoderOutput:encoderOutput});\r\n      this.setState({decoderInput:encoderOutput});\r\n    }\r\n  \r\n    updateDecoderInput = (index,data) => {\r\n      //Update state of the decoder input array element corresponding do slider\r\n      const newInput = update(this.state.decoderInput, {[index]: {$set: parseFloat(data.target.value)}});\r\n      this.setState({decoderInput:newInput},() => {\r\n        const decoderOutput = this.state.model.predictDecoder(this.state.decoderInput);\r\n        this.setState({decoderOutput:decoderOutput}, () => {\r\n        });\r\n      });\r\n    }\r\n  \r\n    createSliders = () => {\r\n      const numCols = 8;\r\n      const numRows = Math.ceil(this.state.decoderInput.length/numCols);\r\n      var sliders = [];\r\n      for (let i=0;i<numRows;i++){\r\n        const rowOfSliders = [];\r\n        for (let j = i*numCols; j < (i+1)*numCols; j++) {\r\n          if (j>=this.state.decoderInput.length){\r\n            rowOfSliders.push(<Col key={-j} className='slider-col'></Col>)\r\n          } else {\r\n            rowOfSliders.push(<Col key={j} className='slider-col'><Slider id={this.state.pcOrder[j]} pc={j+1} value={this.state.decoderInput[this.state.pcOrder[j]]} onSlide={this.updateDecoderInput} min={this.state.minValues[j]} max={this.state.maxValues[j]} step={this.state.step[j]}/></Col>)\r\n          }\r\n        }\r\n        sliders.push(<Row key={i.toString()+\"_row\"} >{rowOfSliders}</Row>);\r\n      }\r\n      return sliders;\r\n    }\r\n  \r\n    render() {\r\n      let sliders;\r\n      if (!!this.state.decoderInput){\r\n          sliders = this.createSliders();\r\n      } else {\r\n        sliders = null;\r\n      }\r\n  \r\n      return (\r\n        <div className=\"App\">\r\n          <h1>Autoencoder</h1>\r\n          <div className=\"container\" style={appDiv}>\r\n          <Container>\r\n            <Row>\r\n              <Col><ImageComponentCol id={\"inputCanvas\"} name={\"Input image\"} data={this.state.sample} width={64} height={64} channels={3} scale={5}/></Col>\r\n              <Col><ImageComponentCol id={\"predCanvas\"} name={\"Output image\"} data={this.state.decoderOutput} width={64} height={64} channels={3} scale={5}/></Col>\r\n            </Row>\r\n            <Row>\r\n              <Col style={{margin: '1em auto'}}><Button onClick={() => this.fetchData()} color=\"danger\" disabled={!!this.state.modelIsLoaded? false : true}>New input</Button></Col>\r\n              <Col style={{margin: '1em auto'}}><Button onClick={() => this.predict()} color=\"primary\"  disabled={!!this.state.sample? false : true} >Reset</Button></Col>\r\n            </Row>\r\n            {/*<Row><h4 style={{margin: '1em auto'}}>Latent features</h4></Row>*/}\r\n            {sliders}\r\n          </Container>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  const appDiv = {\r\n    border: '1px solid #d3d3d3',\r\n    padding: '1em',\r\n  }\r\n  \r\n  export default FacesContainer;\r\n  ","import React from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => (\r\n    <div>\r\n        <Nav>\r\n            <NavItem>\r\n            <NavLink tag={Link} style={{ textDecoration: 'none' }} to=\"/mnist\">\r\n              mnist\r\n            </NavLink>\r\n            </NavItem>\r\n          <NavItem>\r\n            <NavLink tag={Link} style={{ textDecoration: 'none' }} to=\"/faces\">\r\n              Celebrity faces dataset\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;","import React, {Component} from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport '../style/App.css';\n\nimport MnistContainer from \"./MnistContainer\";\nimport FacesContainer from \"./FacesContainer\";\nimport Navbar from \"./Navbar\";\n\n/*\nTODO: Fix proper datafetching on server side.\nTODO: add randomize button\nTODO: add transistion button\n*/\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.connecToServer = this.connecToServer.bind(this);\n  }\n  connecToServer() {\n    fetch('/');\n  }\n\n  componentDidMount() {\n    this.connecToServer();\n  }\n\n  render() {\n    return(\n      <div>\n        <div>\n          <Navbar/>\n        </div>\n        <Switch>\n          <Route path=\"/faces\" exact component={FacesContainer} />\n          <Route path=\"/mnist\" exact component={MnistContainer} />\n          <Route path=\"/\" exact component={MnistContainer} />\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n//For reactrap\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}